server:
  port: 8000

spring:
  application:
    name: micro-dubbo-provider
  cloud:
    nacos:
      discovery:
        enabled: true
        register-enabled: true
        server-addr: 127.0.0.1:8848
  main:
    allow-bean-definition-overriding: true
  kafka:
    bootstrap-servers: node1:9093,node2:9093,node3:9093
    consumer:
      # 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
      groupId: orderGroup
      keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
      valueDserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 最早未被消费的offset
      auto-offset-reset: earliest
      enable-auto-commit: false # 建议手动提交位移 设置成true,auto-commit-interval配置意味着1秒自动提交一次位移。
      auto-commit-interval: 60000ms
    producer:
      groupId: orderGroup
      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
      retries: 3
      keyDeserializer: org.apache.kafka.common.serialization.StringSerializer  # 指定消息key和消息体的编解码方式
      valueDserializer: org.apache.kafka.common.serialization.StringSerializer # 指定消息key和消息体的编解码方式
      batch-size: 16384 # 每次批量发送消息的数量,produce积累到一定数据，一次发送
      buffer-memory: 33554432 # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
      #可以设置的值为：all, -1, 0, 1
      acks: all

dubbo:
  scan:
    base-packages: com.springcloud.dubbo_provider.service
  application:
    id: micro-dubbo-provider
    name: micro-dubbo-provider
  protocol:
    id: dubbo
    name: dubbo
    port: 20881
    status: server
  registry:
    id: micro-dubbo-provider-registry
    address: spring-cloud://127.0.0.1

